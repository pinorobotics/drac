// include xfunction for updateVersion
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.github.lambdaprime:id.xfunction:23.0"
  }
}

plugins {
  id 'com.diffplug.spotless'

  // This plugin is important when you build Java library, as it provides "api" dependency configuration.
  // - "implementation" dependency configuration declares all dependencies inside pom.xml as "runtime"
  // - "api" dependency configuration declares all dependencies inside pom.xml as "compile"
  id 'java-library'
}

boolean isReleaseBuild() {
  return version != null && version.matches("\\d+[.\\d+]*");
}

apply plugin : 'eclipse'

eclipse.classpath.file {
  // instruct eclipse plugin to put everything to module path
  whenMerged {
    entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'true' }
  }
}

dependencies {
  api "io.github.lambdaprime:id.xfunction:27.0"
  api "io.opentelemetry:opentelemetry-api:1.43.0"
  api "com.fasterxml.jackson.core:jackson-databind:2.18.1"
}

configurations {
  customConfig.extendsFrom implementation
}

jar {
  manifest { 
    attributes 'Implementation-Version': "${rootProject.version}"
  }
}

javadoc {
  options.noTimestamp = true
  options.noQualifiers = ["all"]
  options.noTree = true
  options.noIndex = true
  options.noNavBar = true
  // ignore missing @return, @param etc
  options.addBooleanOption('Xdoclint:all,-missing', true)
  options.addStringOption('-show-packages', 'exported')
  // Gradle does not support exclude correctly:
  // https://github.com/gradle/gradle/issues/19726
  def sourceSetDirectories = sourceSets
    .main
    .java
    .sourceDirectories
    .getFiles()
    .stream()
    .map({f -> f.toString() })
    .collect(java.util.stream.Collectors.joining(":"))
  options.addStringOption("-source-path", sourceSetDirectories)
  exclude 'id/drac/impl/**'
}

def packageDir = "$buildDir/package/${projectName}"

ext.artifacts = fileTree(include: ['*'], dir: "$packageDir/libs")

task createRelease(type: Zip) {
  archiveFileName = "$releaseFileName"
  destinationDirectory = file("$projectDir/release")
  from file("$packageDir/..")
}

task copyLibs(type: Copy) {
  from configurations.customConfig 
  from jar.archiveFile
  into "${packageDir}/libs"
}

task copyReadme(type: Copy) {
  from("../README.md")
  into("$buildDir/resources/main")
  rename ("README.md", "README-${projectName}.md")
}

// overwrite template README which comes from resources folder
jar.dependsOn copyReadme
javadoc.dependsOn copyReadme

task createPackage(type: Copy, dependsOn: [copyLibs]) {
  from "${project.rootDir}/README.md"
  from "${project.rootDir}/LICENSE-2.0.txt"
  into packageDir
}

task cleanRelease(type: Delete) {
  delete "$packageDir"
  delete "$projectDir/release/*-SNAPSHOT.zip"
}

createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

// run spotless and format code before the build
classes.dependsOn spotlessApply

task updateVersion() {
  // update version only during release build
  if (!isReleaseBuild()) return;
  println "Updating version to " + version
  new id.xfunction.text.Substitutor()
    .withRegexpSupport()
    .substitute(java.nio.file.Paths.get("${project.rootDir}/README.md"), Map.of(
      "io.github.pinorobotics:drac:[0-9.]+", "io.github.pinorobotics:drac:" + version
    ));
}
createRelease.dependsOn updateVersion

if (project.hasProperty('publish')) {

  // Initially it was taken from https://central.sonatype.org/publish/publish-gradle/
  // but since Gradle removed this plugin https://docs.gradle.org/7.0/userguide/upgrading_version_6.html#removal_of_the_legacy_maven_plugin
  // it was rewritten for new one

  task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from "README-javadoc.txt"
  }

  task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from "README-sources.txt"
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  apply plugin: 'maven-publish'

  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId = 'drac'
        groupId = 'io.github.pinorobotics'
        from components.java
        pom {
          name = 'drac'
          description = 'Java client for Dorna robotic arm'
          url = 'https://github.com/pinorobotics/drac'

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = 'lambdaprime'
              email = 'intid@protonmail.com'
            }
          }

          scm {
            url = 'https://github.com/pinorobotics/drac'
          }
        }
      }
    }
    repositories {
      maven {
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
    }
  }

  if (project.hasProperty('signing.secretKeyRingFile')) {
    apply plugin: 'signing'

    signing {
      sign publishing.publications.mavenJava
    }
  }
}
